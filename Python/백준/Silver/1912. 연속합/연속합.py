N = int(input())  # 배열의 크기
arr = list(map(int, input().split()))  # 배열의 값들

# 최댓값을 계산할 변수, 처음에는 매우 작은 값으로 시작
max_sum = arr[0]  # 첫 번째 값으로 초기화
current_sum = arr[0]  # 누적합을 처음 값으로 초기화

# 배열의 두 번째 값부터 시작하여 누적합을 계산
for i in range(1, N):
    current_sum = max(current_sum + arr[i], arr[i])  # 이전까지의 합 + 현재 값 vs 현재 값만 시작
    max_sum = max(max_sum, current_sum)  # 최댓값 갱신

print(max_sum)


# 누적합을 계산하다가 그 다음 숫자랑 더하려고보니까
# 수가 작아진다
# 그럼 더이상 더할 필요가 없어진다
# 그럼 그 다음의 숫자부터 새로 누적합을 계산한다
# 이렇게 계산하다보면 최대의 누적합을 구할 수 있다
# 현재 숫자가 이전에 나온 부분 배열의 합을 더할만큼 크지 않다면(즉, 이전까지의 연속 합이 오히려 손해가 될 정도로 작다면) 새로운 부분 배열을 시작하는 것이 더 유리하다는 판단을 하게 됩니다.